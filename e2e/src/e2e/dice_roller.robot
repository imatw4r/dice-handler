*** Settings ***
Library         REST    sut
Documentation   Test data can be read from variables and files.
...             Both JSON and Python type systems are supported for inputs.
...             Every request creates a so-called instance. Can be `Output`.
...             Most keywords are effective only for the last instance.
...             Initial schemas are autogenerated for request and response.
...             You can make them more detailed by using assertion keywords.
...             The assertion keywords correspond to the JSON types.
...             They take in either path to the property or a JSONPath query.
...             Using (enum) values in tests optional. Only type is required.
...             All the JSON Schema validation keywords are also supported.
...             Thus, there is no need to write any own validation logic.
...             Not a long path from schemas to full Swagger/OpenAPI specs.
...             The persistence of the created instances is the test suite.
...             Use keyword `Rest instances` to output the created instances.


*** Variables ***
${dice_D1}          { "faces": 6, "name": "D6" }
${dice_D2}          { "faces": 10, "name": "D10" }
${dice_D3}          { "faces": 4, "name": "D4" }
${handle_1}         { "name": "D4+D6" }
${handle_2}         { "name": "D6+D10" }
${handle_3}         { "name": "D4+D6+D10" }

*** Test Cases ***
GET required endpoints
    &{root}=    GET     /                       # this creates a new instance
    Object      response body                   # values are fully optional
    String      response body dice          format=URL
    String      response body dicehandle    format=URL
    Output      response body       ${OUTPUTDIR}/dice.root.json
    [Teardown]  Output  response body

GET Dice list
    Expect Response Body    {"required": ["count", "next", "previous", "results"]}

    GET         /dice/
    Object      response body                   # values are fully optional
    Integer     response body count
    Null        response body previous
    Array       response body results
    Output      Current number of dice in the system is
    Output      response body count
    Output      response body
    [Teardown]  

GET Dice Handles list
    Expect Response Body    {"required": ["count", "next", "previous", "results"]}

    GET         /dicehandle/
    Object      response body                   # values are fully optional
    Integer     response body count
    Null        response body previous
    Array       response body results
    Output      Current number of dice handles in the system is
    Output      response body count
    Output      response body
    [Teardown]

CREATE & DELETE a few dice, validate requirements
    Output  Save curent number of dice and dice handles
    Expect Response Body    {"required": ["count", "next", "previous", "results"]}
    &{dice}=    GET     /dice/
    &{diceh}=   GET     /dicehandle/

    # perform some tests
    Expect Response Body    {"required": ["name", "url", "faces", "roll"]}

    # create dice, validate basic requirements
    &{props}=   Input   ${dice_D1}
    Output      Create and validate ${props.name}
    &{D1}=      POST    /dice/  ${props}
    Integer     response status         201
    Integer     response body roll      minimum=1   maximum=${props.faces}
    Integer     response body faces     ${props.faces}
    String      response body name      ${props.name}
    String      response body url       format=URL
    Output      response body

    # roll'n'roll
    &{DR}=      Input   ${D1}
    Output      5 times roll ${props.name}, roll result should be between 1 and ${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}

    # validate a few more dice
    &{props}=   Input   ${dice_D3}
    Output      Create and validate ${props.name}
    &{D3}=      POST    /dice/  ${props}
    Integer     response status         201
    Integer     response body roll      minimum=1   maximum=${props.faces}
    Integer     response body faces     ${props.faces}
    String      response body name      ${props.name}
    String      response body url       format=URL
    Output      response body

    &{DR}=      Input   ${D3}
    Output      5 times roll ${props.name}, roll result should be between 1 and ${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}

    &{props}=   Input   ${dice_D2}
    Output      Create and validate ${props.name}
    &{D2}=      POST    /dice/  ${props}
    Integer     response status         201
    Integer     response body roll      minimum=1   maximum=${props.faces}
    Integer     response body faces     ${props.faces}
    String      response body name      ${props.name}
    String      response body url       format=URL
    Output      response body

    &{DR}=      Input   ${D2}
    Output      5 times roll ${props.name}, roll result should be between 1 and ${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${DR.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}

    Output      Clean up...

    Output      Delete ${D1.body.url}
    DELETE      ${D1.body.url}      # status can be any of the below
    Integer     response status         200    202     204
    
    Output      Delete ${D3.body.url}
    DELETE      ${D3.body.url}      # status can be any of the below
    Integer     response status         200    202     204
    
    Output      Delete ${D2.body.url}
    DELETE      ${D2.body.url}     # status can be any of the below
    Integer     response status         200    202     204

    Output  Check if the curent number of dice and dice handles are the same as at beginning
    Expect Response Body    {"required": ["count", "next", "previous", "results"]}
    GET         /dice/
    Integer     response body count   ${dice.body.count}
    GET         /dicehandle/
    Integer     response body count   ${diceh.body.count}

    [Teardown]

CREATE & DELETE a few dice handles, validate requirements
    
    Output  Save curent number of dice and dice handles
    Expect Response Body    {"required": ["count", "next", "previous", "results"]}
    &{dice}=    GET     /dice/
    &{diceh}=   GET     /dicehandle/


    Expect Response Body    {"required": ["name", "url", "faces", "roll"]}

    Output      Create dice D1, D2, D3 required for the following tests
    &{D1}=      POST    /dice/  ${dice_D1}
    Integer     response status         201
    Output      response body url
    &{D2}=      POST    /dice/  ${dice_D2}
    Integer     response status         201
    Output      response body url
    &{D3}=      POST    /dice/  ${dice_D3}
    Integer     response status         201
    Output      response body url
 
    Expect Response Body    {"required": ["name", "url", "dice", "roll"]}

    # craeate default dice, validate basic requirements
    Output      Create and validate default dice handle
    &{H1}=      POST    /dicehandle/
    Integer     response status         201
    Integer     response body roll      0
    Array       response body dice      maxItems=0
    String      response body name
    String      response body url       format=URL
    Output      response body

    # dice handle - change name 
    &{props}=   Input   ${handle_1}
    Output      Change name to ${props.name}
    PUT         ${H1.body.url}         ${handle_1}
    String      response body name      ${props.name}
    Output      response body

    # dice handle - add dice
    &{props}=   Input   ${D3.body}
    Output      Add ${props.name} to handle
    PUT         ${H1.body.url}         { "dice": [ "${props.url}" ] }
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    Array       response body dice      minItems=1  maxItems=1
    String      response body dice 0    ${props.url}
    Output      response body

    # dice handle - change dice
    &{props}=   Input   ${D1.body}
    Output      Change handle dice to ${props.name}
    PUT         ${H1.body.url}         { "dice": [ "${props.url}" ] }
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    Array       response body dice      minItems=1  maxItems=1
    String      response body dice 0    ${props.url}
    Output      response body

    # dice handle - rool it a few times
    Output      5 times roll dice handle, roll result should be between 1 and ${props.faces}
    &{roll}=    GET    ${H1.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${H1.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${H1.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${H1.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}
    &{roll}=    GET    ${H1.body.url}
    Integer     response status         200
    Integer     response body roll      minimum=1   maximum=${props.faces}

    # dice handle - add more then one dice
    &{props}=   Input   ${D1.body}
    &{props2}=  Input   ${D3.body}
    Output      Change handle's dice to ${props.name}+${props2.name}
    PUT         ${H1.body.url}         { "dice": [ "${props.url}", "${props2.url}" ] }
    Integer     response status         200
    Array       response body dice      minItems=2  maxItems=2
    String      response body dice 0    ${props.url}
    String      response body dice 1    ${props2.url}
    Output      response body

    # dice handle - create and validate a few more
    &{props}=   Input   ${handle_2}
    Output      Create and validate ${props.name} dice handle
    &{H2}=      POST    /dicehandle/    ${props}
    Integer     response status         201
    Integer     response body roll      0
    Array       response body dice      maxItems=0
    String      response body name      ${props.name}
    Output      response body

    &{props}=   Input   ${D1.body}
    &{props2}=  Input   ${D2.body}
    Output      Change handle's dice to ${props.name}+${props2.name}
    PUT         ${H2.body.url}         { "dice": [ "${props.url}", "${props2.url}" ] }
    Integer     response status         200
    Array       response body dice      minItems=2  maxItems=2
    String      response body dice 0    ${props.url}
    String      response body dice 1    ${props2.url}
    Output      response body


    &{props}=   Input   ${handle_3}
    Output      Create and validate ${props.name} dice handle
    &{H3}=      POST    /dicehandle/    ${props}
    Integer     response status         201
    Integer     response body roll      0
    Array       response body dice      maxItems=0
    String      response body name      ${props.name}
    Output      response body

    &{props}=   Input   ${D1.body}
    &{props2}=   Input   ${D2.body}
    &{props3}=   Input   ${D3.body}
    Output      Change handle's dice to ${props.name}+${props2.name}+${props3.name}
    PUT         ${H3.body.url}         { "dice": [ "${props.url}", "${props2.url}", "${props3.url}" ] }
    Integer     response status         200
    Array       response body dice      minItems=3  maxItems=3
    String      response body dice 0    ${props.url}
    String      response body dice 1    ${props2.url}
    String      response body dice 2    ${props3.url}
    Output      response body
    
    Output      Clean up...
    Output      Delete dice D1, D2, D3
    DELETE      ${D1.body.url}      # status can be any of the below
    Integer     response status         200    202     204
    DELETE      ${D2.body.url}     # status can be any of the below
    Integer     response status         200    202     204
    DELETE      ${D3.body.url}      # status can be any of the below
    Integer     response status         200    202     204

    Output      Delete dice handles H1, H2, H3
    DELETE      ${H1.body.url}      # status can be any of the below
    Integer     response status         200    202     204
    DELETE      ${H2.body.url}      # status can be any of the below
    Integer     response status         200    202     204
    DELETE      ${H3.body.url}      # status can be any of the below
    Integer     response status         200    202     204


    Output  Check if the curent number of dice and dice handles are the same as at beginning
    Expect Response Body    {"required": ["count", "next", "previous", "results"]}
    GET         /dice/
    Integer     response body count   ${dice.body.count}
    GET         /dicehandle/
    Integer     response body count   ${diceh.body.count}

    [Teardown]
